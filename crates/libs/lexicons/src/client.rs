// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Structs for ATP client, implements all HTTP APIs of XRPC.
///Client struct for the ATP service.
pub struct AtpServiceClient<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    pub service: Service<T>,
}
impl<T> AtpServiceClient<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    pub fn new(xrpc: T) -> Self {
        Self {
            service: Service::new(std::sync::Arc::new(xrpc)),
        }
    }
}
pub struct Service<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    pub moe: moe::Service<T>,
    pub(crate) _phantom: core::marker::PhantomData<T>,
}
pub mod moe {
    pub struct Service<T>
    where
        T: atrium_xrpc::XrpcClient + Send + Sync,
    {
        pub hayden: hayden::Service<T>,
        pub(crate) _phantom: core::marker::PhantomData<T>,
    }
    pub mod hayden {
        pub struct Service<T>
        where
            T: atrium_xrpc::XrpcClient + Send + Sync,
        {
            pub blogi: blogi::Service<T>,
            pub(crate) _phantom: core::marker::PhantomData<T>,
        }
        pub mod blogi {
            pub struct Service<T>
            where
                T: atrium_xrpc::XrpcClient + Send + Sync,
            {
                pub actor: actor::Service<T>,
                pub blog: blog::Service<T>,
                pub(crate) _phantom: core::marker::PhantomData<T>,
            }
            pub mod actor {
                pub struct Service<T>
                where
                    T: atrium_xrpc::XrpcClient + Send + Sync,
                {
                    pub(crate) xrpc: std::sync::Arc<T>,
                    pub(crate) _phantom: core::marker::PhantomData<T>,
                }
            }
            pub mod blog {
                pub struct Service<T>
                where
                    T: atrium_xrpc::XrpcClient + Send + Sync,
                {
                    pub(crate) xrpc: std::sync::Arc<T>,
                    pub(crate) _phantom: core::marker::PhantomData<T>,
                }
            }
        }
    }
}
impl<T> self::Service<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    #[allow(unused_variables)]
    pub(crate) fn new(xrpc: std::sync::Arc<T>) -> Self {
        Self {
            moe: moe::Service::new(std::sync::Arc::clone(&xrpc)),
            _phantom: core::marker::PhantomData,
        }
    }
}
impl<T> moe::Service<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    #[allow(unused_variables)]
    pub(crate) fn new(xrpc: std::sync::Arc<T>) -> Self {
        Self {
            hayden: moe::hayden::Service::new(std::sync::Arc::clone(&xrpc)),
            _phantom: core::marker::PhantomData,
        }
    }
}
impl<T> moe::hayden::Service<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    #[allow(unused_variables)]
    pub(crate) fn new(xrpc: std::sync::Arc<T>) -> Self {
        Self {
            blogi: moe::hayden::blogi::Service::new(std::sync::Arc::clone(&xrpc)),
            _phantom: core::marker::PhantomData,
        }
    }
}
impl<T> moe::hayden::blogi::Service<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    #[allow(unused_variables)]
    pub(crate) fn new(xrpc: std::sync::Arc<T>) -> Self {
        Self {
            actor: moe::hayden::blogi::actor::Service::new(std::sync::Arc::clone(&xrpc)),
            blog: moe::hayden::blogi::blog::Service::new(std::sync::Arc::clone(&xrpc)),
            _phantom: core::marker::PhantomData,
        }
    }
}
impl<T> moe::hayden::blogi::actor::Service<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    #[allow(unused_variables)]
    pub(crate) fn new(xrpc: std::sync::Arc<T>) -> Self {
        Self {
            xrpc,
            _phantom: core::marker::PhantomData,
        }
    }
    ///Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.
    pub async fn get_profile(
        &self,
        params: crate::moe::hayden::blogi::actor::get_profile::Parameters,
    ) -> atrium_xrpc::Result<
        crate::moe::hayden::blogi::actor::get_profile::Output,
        crate::moe::hayden::blogi::actor::get_profile::Error,
    > {
        let response = self
            .xrpc
            .send_xrpc::<
                _,
                (),
                _,
                _,
            >(
                &atrium_xrpc::XrpcRequest {
                    method: http::Method::GET,
                    nsid: crate::moe::hayden::blogi::actor::get_profile::NSID.into(),
                    parameters: Some(params),
                    input: None,
                    encoding: None,
                },
            )
            .await?;
        match response {
            atrium_xrpc::OutputDataOrBytes::Data(data) => Ok(data),
            _ => Err(atrium_xrpc::Error::UnexpectedResponseType),
        }
    }
}
impl<T> moe::hayden::blogi::blog::Service<T>
where
    T: atrium_xrpc::XrpcClient + Send + Sync,
{
    #[allow(unused_variables)]
    pub(crate) fn new(xrpc: std::sync::Arc<T>) -> Self {
        Self {
            xrpc,
            _phantom: core::marker::PhantomData,
        }
    }
    ///Get a list of posts for a specific account.
    pub async fn get_entries_for_author(
        &self,
        params: crate::moe::hayden::blogi::blog::get_entries_for_author::Parameters,
    ) -> atrium_xrpc::Result<
        crate::moe::hayden::blogi::blog::get_entries_for_author::Output,
        crate::moe::hayden::blogi::blog::get_entries_for_author::Error,
    > {
        let response = self
            .xrpc
            .send_xrpc::<
                _,
                (),
                _,
                _,
            >(
                &atrium_xrpc::XrpcRequest {
                    method: http::Method::GET,
                    nsid: crate::moe::hayden::blogi::blog::get_entries_for_author::NSID
                        .into(),
                    parameters: Some(params),
                    input: None,
                    encoding: None,
                },
            )
            .await?;
        match response {
            atrium_xrpc::OutputDataOrBytes::Data(data) => Ok(data),
            _ => Err(atrium_xrpc::Error::UnexpectedResponseType),
        }
    }
}
